\documentclass{article}
\usepackage[margin=0.3in]{geometry}
\usepackage{datetime}

\title{Analysis report for Barcoder.Rnw}
\author{Zachary Foster}
\date{\today,\ \currenttime}
\begin{document}

\maketitle

\section{Script information}
The following R packages were used in this scirpt:

<<imports, message=FALSE>>=
library(png)
library(grid)
library(igraph)
library(ggplot2)
library(spider)
library(tools)
library(phyloch)
library(Hmisc)
library(knitr)
library(xtable)
library(plyr)
library(plotrix)
@

<<setup, include=FALSE>>=
# set global chunk options
opts_chunk$set(fig.align='center', 
               fig.show='asis', 
               fig.lp="", 
               error=FALSE, 
               cach=FALSE, 
               dpi=600, 
               include=FALSE, 
               echo=FALSE, 
               tidy=TRUE, 
               out.width=".9\\linewidth", 
               fig.width = 8)
@

<<"functions">>=

melting_temperature <- function(primer_sequence) {
  short_calculation <- function(sequence) {
    4 * sum(sequence == 'G' | sequence == 'C') + 2 * sum(sequence == 'A' | sequence == 'T')
  }
  long_calculation <- function(sequence) {
    64.9 + 41 * (sum(sequence == 'G' | sequence == 'C') - 16.4) / length(sequence)
  }
  split_sequence <- strsplit(as.character(primer_sequence), split="")
  sapply(split_sequence, function(x) if (length(x) < 14) short_calculation(x) else long_calculation(x))
}

taxon_edge_list <- function(taxonomy, separator) {
  get_taxon_edge_list <- function(taxon) {
    apply(matrix(c(1:(length(taxon)-1),2:length(taxon)), ncol = 2), 1, function(x) c(taxon[x[1]], taxon[x[2]]))
  }
  taxons <- strsplit(taxonomy, separator, fixed=TRUE)
  taxons <- lapply(taxons, function(x) sapply(seq(1, length(x)), function(y) paste(x[1:y], collapse=separator)))
  edge_list <- t(do.call(cbind,lapply(taxons, FUN=get_taxon_edge_list)))
  edge_list[!duplicated(edge_list),]
}

children <- function(graph, vertex) {
  which(shortest.paths(graph, V(graph)[vertex], mode="out") != Inf)
}

list_to_DNAbin <- function(sequences, seq_names) {
  seq_names <- seq_names[nchar(sequences) > 0]
  sequences <- sequences[nchar(sequences) > 0]
  x <- unname(sapply(sequences, strsplit, split=''))
  names(x) <- seq_names
  as.DNAbin(x)
}


get_count <- function(data, graph, variable, max_depth) {
  total_count <- 'This_is_an_arbitrary_name'
  data[total_count] <- rep(NA, nrow(data))
  data[data$depth == max_depth, total_count] <- data[data$depth == max_depth, variable]
  for (depth in seq(max_depth - 1, 1)) {
    data[data$depth == depth, total_count] <- 
      apply(data[data$depth == depth, c(variable, 'index')], MARGIN=1, 
            function(x) x[[variable]] + sum(data[neighbors(graph,x[['index']]), total_count]))
  }
  return(data[[total_count]])
}


add_alpha <- function(col, alpha=1){
apply(sapply(col, col2rgb)/255, 2,
      function(x)
      rgb(x[1], x[2], x[3], alpha=alpha))
}

mycircle <- function(coords, v=NULL, params) {
  vertex.color <- params("vertex", "color")
  if (length(vertex.color) != 1 && !is.null(v)) {
    vertex.color <- vertex.color[v]
  }
  vertex.size  <- 1/200 * params("vertex", "size")
  if (length(vertex.size) != 1 && !is.null(v)) {
    vertex.size <- vertex.size[v]
  }
  vertex.frame.color <- params("vertex", "frame.color")
  if (length(vertex.frame.color) != 1 && !is.null(v)) {
    vertex.frame.color <- vertex.frame.color[v]
  }
  vertex.frame.width <- params("vertex", "frame.width")
  if (length(vertex.frame.width) != 1 && !is.null(v)) {
    vertex.frame.width <- vertex.frame.width[v]
  }
  
  mapply(coords[,1], coords[,2], vertex.color, vertex.frame.color,
         vertex.size, vertex.frame.width,
         FUN=function(x, y, bg, fg, size, lwd) {
           symbols(x=x, y=y, bg=bg, fg=fg, lwd=lwd,
                   circles=size, add=TRUE, inches=FALSE)
         })
}

latex_format <- function(string) {
  return(gsub('_', '\\\\_', string))
}

list_to_array <- function(the_list) {
  array(unlist(the_list), 
        dim = c(nrow(the_list[[1]]), 
                ncol(the_list[[1]]), 
                length(the_list)), 
        dimnames=list(row.names(the_list[[1]]), 
                      colnames(the_list[[1]]), 
                      names(the_list)))
}

@

<<"constants">>=
blank_theme <- theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position="none", panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), plot.background=element_blank())
primersearch_input_path_name <- 'primersearch_input.txt'
primersearch_database_path_name <- 'primersearch_database.fasta'
primersearch_output_path_name <- 'primersearch_output.txt'

amplicon_proportion_path_name <- 'amplicon_proportion_by_clade.txt'
species_proportion_path_name <- 'species_proportion_by_clade.txt'
genus_proportion_path_name <- 'genus_proportion_by_clade.txt'
taxon_proportion_path_name <- 'taxon_proportion_by_level.txt'
taxon_threshold_path_name <- 'distance_threshold_by_level.txt'
clade_threshold_path_name <- 'distance_threshold_by_clade.txt'
taxon_gap_path_name <- 'barcode_gap_by_level.txt'
clade_gap_path_name <- 'barcode_gap_by_clade.txt'

top_clade = "All"
taxonomy_hierarchy <- c("life", "domain", "kingdom", "phylum", "class", "order", "family", "genus","species")
taxonomy_separator <- "|"

color_pallette <- c("dodgerblue2","#E31A1C", # red
          "green4",
          "#6A3D9A", # purple
          "#FF7F00", # orange
          "gold1",
          "skyblue2","#FB9A99", # lt pink
          "palegreen2",
          "#CAB2D6", # lt purple
          "#FDBF6F", # lt orange
          "gray70", "khaki2",
          "maroon","orchid1","deeppink1","blue1","steelblue4",
          "darkturquoise","green1","yellow4","yellow3",
          "darkorange4","brown")

add.vertex.shape("fcircle", 
                 plot=mycircle, 
                 parameters=list(vertex.frame.color=1, vertex.frame.width=1))

max_tm_difference <- 10
minimum_proportion_detected <- 0.5
@

<<argument_parsing>>=
#arguments <- commandArgs(TRUE)
arguments <- c("/home/local/USDA-ARS/fosterz/ITS_analysis/PR2_database/refseq_gb-191_head1000.fasta",
               "/home/local/USDA-ARS/fosterz/ITS_analysis/adl_2014_protist_SSU_primers.fasta",
               "/home/local/USDA-ARS/fosterz/ITS_analysis",
               "0")
names(arguments) <- c("database", "primers", "output", "mismatch")
output_path <- file.path(arguments["output"], basename(file_path_sans_ext(arguments["primers"])))
unlink(output_path, recursive=TRUE)
dir.create(output_path)
@

\section{Arguments}
\textbf{File path to sequence database:}
\Sexpr{latex_format(arguments[["database"]])}
\\[3ex]
\textbf{File path to primer sequence file:}
\Sexpr{latex_format(arguments[["primers"]])}
\\[3ex]
\textbf{Output stored in:}
\Sexpr{latex_format(arguments[["output"]])}
\\[3ex]
\textbf{Primersearch mismatch tolerated:} \Sexpr{latexTranslate(arguments["mismatch"])}\%

<<import_reference_database>>=
#read sequence database
database <- read.dna(arguments["database"], format="fasta")

#make sequence data frame
sequences <- sapply(as.character(database), paste, collapse='')
split_name <- strsplit(c(labels(sequences)), taxonomy_separator, fixed = TRUE)
sequence_data <- data.frame(row.names=sapply(split_name, function(x) x[1]), 
                            sequence=as.character(unname(sequences)))
sequence_data$taxonomy <- sapply(split_name, function(x) paste(c(top_clade, x[2:length(x)]), collapse=taxonomy_separator))
sequence_data$taxonomy_tips <- unlist(lapply(strsplit(sequence_data$taxonomy, taxonomy_separator, fixed=TRUE), function(x) x[length(x)]))
sequence_data$taxon_depth <- sapply(sequence_data$taxonomy, length)
sequence_data$length <- nchar(as.character(sequence_data$sequence))
sequence_data <- cbind(sequence_data, matrix(unlist(strsplit(sequence_data$taxonomy, taxonomy_separator, fixed = TRUE)), 
                                             ncol=length(taxonomy_hierarchy), 
                                             byrow=TRUE, 
                                             dimnames=list(NULL, taxonomy_hierarchy)))
rm(sequences)
rm(split_name)
rm(database)

#make taxon data frame (index is veticies of the taxonomy graph)
taxonomy_graph <- graph.edgelist(taxon_edge_list(sequence_data$taxonomy, taxonomy_separator))
taxon_root <- V(taxonomy_graph)[1]
taxon_data <- data.frame(row.names=V(taxonomy_graph)$name)
taxon_data$index <- c(V(taxonomy_graph))
#store the distance of all taxons from the root
taxon_data$depth <- sapply(get.shortest.paths(taxonomy_graph, from=taxon_root), length)
max_taxon_depth <- max(taxon_data$depth)
#store number of database sequences for each taxon defined at that level explicitly
taxon_data$sequence_count <- tapply(sequence_data$taxonomy, list(sequence_data$taxonomy), length)[rownames(taxon_data)]
taxon_data$sequence_count[is.na(taxon_data$sequence_count)] <- 0
#calculate the number of database sequences at each taxon as the sum of their subgroups
taxon_data$total_count <- get_count(taxon_data, taxonomy_graph, 'sequence_count', max_taxon_depth)

get_edge_parents <-function(graph) {get.edges(taxonomy_graph, 1:ecount(taxonomy_graph))[,1]}
get_edge_children <- function(graph) {get.edges(taxonomy_graph, 1:ecount(taxonomy_graph))[,2]}

#set default graphing display parameters
taxonomy_graph_layout <- layout.reingold.tilford(taxonomy_graph, root = 1, circular = TRUE)
V(taxonomy_graph)$size <- (log(taxon_data$total_count + .5) / max(log(taxon_data$total_count) + .5)) * 10
V(taxonomy_graph)$label.cex <- V(taxonomy_graph)$size * .05 + .15
V(taxonomy_graph)$label.color <- "black"
V(taxonomy_graph)$color[order(V(taxonomy_graph)$name)] <- rainbow_hcl(length(V(taxonomy_graph)$name))
V(taxonomy_graph)$alpha <- (max_taxon_depth*1.5 - taxon_data$depth) / (max_taxon_depth*1.5)
V(taxonomy_graph)$color <- mapply(add_alpha, V(taxonomy_graph)$color, V(taxonomy_graph)$alpha)
E(taxonomy_graph)$depth <- taxon_data$depth[get_edge_parents(taxonomy_graph)]
max_edge_depth <- max(E(taxonomy_graph)$depth)
E(taxonomy_graph)$width <- V(taxonomy_graph)$size[get_edge_children(taxonomy_graph)] * .4
E(taxonomy_graph)$color <- sapply(((max_edge_depth*4 - E(taxonomy_graph)$depth) / (max_edge_depth*4)) * .3,
                                  function(x) rgb(red=.3,green=.3,blue=.3,alpha=x))
@

\section{Reference sequence database information}

<<"reference_length_histogram", fig.height=4, fig.cap="Reference database sequence length distribution", include=TRUE>>=
qplot(length, data=sequence_data, geom="histogram", binwidth=20)
@

<<results='asis', include=TRUE>>=
taxon_level_data <- data.frame(count=apply(sequence_data[,taxonomy_hierarchy], 
                                           MARGIN=2, 
                                           function(x) length(unique(x))))
taxon_counts <- lapply(taxonomy_hierarchy, function(x) as.numeric(table(sequence_data[,x])))
taxon_level_data$'average count/taxon' <- sapply(taxon_counts, mean)
xtable(taxon_level_data)
@

<<count_per_taxon, fig.height=5, fig.cap="The number of sequences in the reference database in each taxon, for each taxonomic level.", include=TRUE>>=
names(taxon_counts) <- taxonomy_hierarchy
taxon_counts <- stack(taxon_counts)
taxon_counts$ind <- factor(taxon_counts$ind, levels=taxonomy_hierarchy)
colnames(taxon_counts) <- c("count", "level")
qplot(level, count + .5, data = taxon_counts, geom = "boxplot", log="y")
histogram_plot <- ggplot(taxon_counts, aes(x=count))
histogram_plot + geom_histogram(binwidth=1) + facet_wrap(~level, scales="free") + xlim(1, 100)
@


<<reference_taxonomy_full, fig.width=8, fig.height=8, dev='png', include = TRUE, fig.cap="The taxonomy of reference database used. The size of verticies indicate the proportion of the total sequences represented by each taxon. The thickness of the edges correspond to the taxonomic level of the source vertex. Only the names of taxons with count proportions in the top 100 were labeled.">>=
labels <- sapply(strsplit(V(taxonomy_graph)$name, taxonomy_separator, fixed = TRUE), function(x) x[length(x)])
labels[-rev(order(V(taxonomy_graph)$size))[1:100]] <- ''
plot(taxonomy_graph, 
     layout=taxonomy_graph_layout,  
     margin=0, 
     vertex.label.dist=0,
     vertex.label.degree=0,
     edge.arrow.size =0,
     vertex.shape="fcircle", 
     vertex.frame.color='black',
     vertex.frame.width=.06,
     vertex.label=labels)
rm(labels)
@

<<reference_taxonomy_partial, fig.width=8, fig.height=8, fig.align='center', dev='png', include = TRUE, fig.cap="The taxonomy of reference database used. The size of verticies indicate the proportion of the total sequences represented by each taxon. The thickness of the edges correspond to the taxonomic level of the source vertex. Only the names of taxons with count proportions in the top 200 were added.">>=
top_verticies <- rev(order(V(taxonomy_graph)$size))[1:200]
labels <- sapply(strsplit(V(taxonomy_graph)$name, taxonomy_separator, fixed = TRUE), function(x) x[length(x)])
subgraph <- induced.subgraph(taxonomy_graph, top_verticies)
plot(subgraph,
     layout=layout.reingold.tilford(subgraph, root = 1, circular = TRUE),  
     margin=0, 
     vertex.label.dist=0,
     vertex.label.degree=0,
     edge.arrow.size =0,
     vertex.shape="fcircle", 
     vertex.frame.color='black',
     vertex.frame.width=.06,
     vertex.label=labels[top_verticies])
rm(labels)
rm(top_verticies)
rm(subgraph)
@

<<primersearch>>=

### PRIMERSEARCH INPUT PREPARATION ###

#Save modified database file for primersearch
primersearch_database_path <- file.path(output_path, primersearch_database_path_name)
sequences <- sequence_data$sequence
names(sequences) <- apply(matrix(c(rownames(sequence_data), as.character(sequence_data$taxonomy)), ncol = 2),
                          MARGIN=1, FUN=paste, collapse = ' ')
write.dna(sequences, 
          primersearch_database_path, 
          format = "fasta", 
          nbcol = -1, 
          colw =  max(nchar(as.character(sequences))))
rm(sequences)

#load input primers from fasta file
primer_data <- data.frame(sequence=sapply(as.character(read.dna(arguments["primers"], format="fasta")), paste, collapse=''))

#Calculate primer Tm
primer_data$tm <- melting_temperature(primer_data$sequence)

#Create all unique combinations of primers 
primer_pair_data <- data.frame(row.names=apply(t(combn(row.names(primer_data), 2)), 1, paste, collapse='__'), 
                               t(combn(row.names(primer_data), 2)),
                               t(combn(as.character(primer_data$sequence), 2)))
names(primer_pair_data) <- c("name_1", "name_2", "sequence_1", "sequence_2")

#Filter out primer combinations with too large a difference in Tm
primer_pair_data$tm_difference <- abs(primer_data$tm[primer_pair_data$name_1] - primer_data$tm[primer_pair_data$name_2])
primer_pair_data <- primer_pair_data[primer_pair_data$tm_difference <= max_tm_difference, ]

#write primersearch input file
primersearch_input_path <- file.path(output_path, primersearch_input_path_name)
write.table(primer_pair_data[,c("sequence_1", "sequence_2")], 
            primersearch_input_path, 
            sep="\t",
            row.names = TRUE,
            col.names = FALSE,
            quote = FALSE) 


### PRIMERSEARCH EXECUTION ###

primersearch_output_path <- file.path(output_path, primersearch_output_path_name)
primersearch_arguments <- unname(c(arguments["database"], primersearch_input_path, arguments["mismatch"], primersearch_output_path))
primersearch_command_line <- gettextf('primersearch -seqall %s -infile %s -mismatchpercent %s -outfile %s',
                                      primersearch_database_path,
                                      primersearch_input_path,
                                      arguments["mismatch"],
                                      primersearch_output_path)
system(primersearch_command_line)


### PRIMERSEARCH OUTPUT PARSING###

primersearch_output <- readLines(primersearch_output_path)
primer_indexes <- grep("Primer name ", primersearch_output, perl=TRUE, value=FALSE)
primer_values <- grep("Primer name ", primersearch_output, perl=TRUE, value=TRUE)
primer_values <- unlist(lapply(strsplit(primer_values, " ", fixed=TRUE), function(x) x[3]))
id_indexes <- grep("\tSequence: ", primersearch_output, perl=TRUE, value=FALSE)
id_values <- grep("\tSequence: ", primersearch_output, perl=TRUE, value=TRUE)
id_values <- sapply(strsplit(id_values, " ", fixed=TRUE), function(x) x[2])

primersearch_data <- data.frame(id_values=id_values)

primersearch_data$taxon_values <- as.factor(sapply(primersearch_output[id_indexes + 1],
                                                   function(x) substr(x, 2, nchar(x))))
primersearch_data$forward_primer <- as.factor(sapply(strsplit(primersearch_output[id_indexes + 2], " ", fixed=TRUE), 
                                function(x) substr(x[1], 2, nchar(x))))
primersearch_data$reverse_primer <- as.factor(sapply(strsplit(primersearch_output[id_indexes + 3], " ", fixed=TRUE), 
                                function(x) substr(x[1], 2, nchar(x))))
primersearch_data$forward_location <- as.numeric(sapply(strsplit(primersearch_output[id_indexes + 2], " ", fixed=TRUE), 
                                             function(x) x[6]))
primersearch_data$reverse_location <- as.numeric(sapply(strsplit(primersearch_output[id_indexes + 3], " ", fixed=TRUE), 
                                             function(x) substr(x[6], 2, nchar(x[6]) - 1)))
primersearch_data$forward_mismatch <- as.numeric(sapply(strsplit(primersearch_output[id_indexes + 2], " ", fixed=TRUE), 
                                             function(x) x[8]))
primersearch_data$reverse_mismatch <- as.numeric(sapply(strsplit(primersearch_output[id_indexes + 3], " ", fixed=TRUE), 
                                                        function(x) x[8]))              
primersearch_data$amplicon_length <- as.numeric(sapply(strsplit(primersearch_output[id_indexes + 4], " ", fixed=TRUE), 
                                                        function(x) x[3]))              
primersearch_data$primer_pair <- as.factor(rep(primer_values, 
                   as.numeric(table(cut(id_indexes, c(primer_indexes, length(primersearch_output)))))))
primersearch_data <- cbind(primersearch_data, sequence_data[as.character(primersearch_data$id_values),taxonomy_hierarchy], row.names=NULL)
@

<<sensitivity_statistics>>=

#calculate proportion of sequences detected by each primer pair
primer_pair_data$amplicon_count <- 0
counts <- c(by(primersearch_data, primersearch_data$primer_pair, nrow))
primer_pair_data[labels(counts), c("amplicon_count")] <- counts
primer_pair_data$proportion_detected <- primer_pair_data$amplicon_count/nrow(sequence_data)
rm(counts)

#Filter out primer pairs that have too little amplification
passing_pairs <- row.names(primer_pair_data)[which(primer_pair_data$proportion_detected > minimum_proportion_detected)]
primer_pair_data <- droplevels(primer_pair_data[passing_pairs,])
primersearch_data <- droplevels(primersearch_data[which(primersearch_data$primer_pair %in% passing_pairs), ])

#store number of amplicons for each taxon defined at that level explicitly
taxon_data$amplicon_count <- 0
unordered_count <- tapply(primersearch_data$taxon_values, 
                          INDEX=list(taxon=primersearch_data$taxon_values), 
                          FUN=length)
taxon_data$amplicon_count <- unordered_count[rownames(taxon_data)]
taxon_data$amplicon_count[is.na(taxon_data$amplicon_count)] <- 0

#calculate the number of amplicons at each taxon as the sum of their subgroups
taxon_data$total_amplicon_count <- get_count(taxon_data, taxonomy_graph, 'amplicon_count', max_taxon_depth)

#Calculate the number of amplicons at each taxon as for each primer set
get_amplicon_count <- function(amplicons, data, graph, max_depth) {
  variable <- 'This_is_arbitrary'
  data[variable] <- 0
  unordered_count <- tapply(amplicons, INDEX=list(taxon=amplicons), FUN=length)
  data[variable] <- unordered_count[rownames(data)]
  data[is.na(data[variable]), variable] <- 0
  return(get_count(data, graph, variable, max_depth))
}
primer_counts <- data.frame(c(by(data=primersearch_data$taxon_values, 
                                 INDICES=list(primer_pair=primersearch_data$primer_pair), 
                                 FUN=function(x) get_amplicon_count(x, taxon_data, taxonomy_graph, max_taxon_depth))))
rownames(primer_counts) <- rownames(taxon_data)

#Calculate the proportion of taxons represented by amplicons 
primer_proportions <- data.frame((apply(primer_counts, MARGIN=2, function(x) x / taxon_data$total_count)))
primer_proportions <- primer_proportions[,rev(order(primer_proportions[1,]))]
if (max(primer_proportions) > 1) {
  warning("Taxon proportions greater than 1 detected. Changing to 1. ")
  primer_proportions[primer_proportions > 1] <- 1
}

### Calculate proportion of taxonomic groups matched for each taxonomic group for each primer pair ###

taxon_data$depth <- factor(taxon_data$depth)
levels(taxon_data$depth) <- taxonomy_hierarchy
taxonomic_rank_data <- data.frame(row.names=taxonomy_hierarchy)
taxonomic_rank_data$count <- c(table(taxon_data$depth))
get_taxonomic_rank_count <- function(proportions, depth, level=0) {
  apply(proportions, MARGIN=2, FUN=tapply, INDEX=depth, function(x) sum(x > level))
}
level_range <- seq(0, .9, by=0.01)
taxonomic_rank_counts <- lapply(level_range,
                               function(x) get_taxonomic_rank_count(primer_proportions, taxon_data$depth, x))
names(taxonomic_rank_counts) <- level_range
taxonomic_rank_counts <- list_to_array(taxonomic_rank_counts)
taxonomic_rank_proportions <- apply(taxonomic_rank_counts, MARGIN=c(2,3), function(x) x / taxonomic_rank_data$count)
@

<<primer_pair_table, results='asis', include=TRUE>>=
xtable(t(taxonomic_rank_proportions[,,1]), 
       caption="The proportion of various taxa for which at least one reference sequence was matched for each primer pair.")
@

<<taxon_primer_pair_detection, fig.height=8, dev='png', include=TRUE, fig.cap="This graph compares the ability of primer pairs to detect taxa of each taxonomic level. The x axis is the minimum proportion of reference sequences within a taxon that a primer pair must match for the taxon to be considered detected. The y-axis is the proportion detected at this threshold.">>=
flattened <- adply(taxonomic_rank_proportions,1:3)
names(flattened) <- c("Level", "Primer_Pair", "Detection_Threshold", "Proportion_Detected")
flattened$Detection_Threshold <- as.numeric(flattened$Detection_Threshold)
ggplot(data=flattened, aes(x=Detection_Threshold, y=Proportion_Detected, group=Primer_Pair, colour=Primer_Pair)) + geom_line()  + facet_wrap(~Level)
rm(flattened)
@


<<taxon_proportion_1, fig.height=8, fig.align='center', dev='png', include=TRUE, fig.cap="The proportion of each taxon detected by this primer pair. The size of verticies indicate the proportion of the total sequences represented by each taxon. The thickness of the edges correspond to the taxonomic level of the source vertex. Only the names of taxons major taxa with low scores are labeled.">>=
bad_proportions <- which(primer_proportions[,1] < .5)
if (length(bad_proportions) > 30) {
  top_verticies <- which(taxon_data$total_count[bad_proportions] > rev(sort(taxon_data$total_count[bad_proportions]))[30])
} else {
  top_verticies <- seq(1,length(bad_proportions))
}
bad_proportions <- bad_proportions[top_verticies]
labels <- sapply(strsplit(V(taxonomy_graph)$name, taxonomy_separator, fixed = TRUE), function(x) x[length(x)])
labels[-bad_proportions] <- ''
plot(taxonomy_graph,
     layout=taxonomy_graph_layout,  
     margin=0, 
     vertex.label.dist=0,
     vertex.label.degree=0,
     edge.arrow.size =0,
     vertex.shape="fcircle", 
     vertex.frame.color='black',
     vertex.frame.width=.06,
     vertex.label=labels,
     vertex.color=mapply(add_alpha, 
                         color.scale(primer_proportions[,1], c(1,0,0), c(0,1,0), c(0,0,1)), 
                         alpha=V(taxonomy_graph)$alpha))
rm(labels)
rm(top_verticies)
@


<<"sequence_filtering", eval=FALSE>>=
minimum_species_count <- 5
primersearch_data <- do.call(rbind, lapply(split(primersearch_data, list(primersearch_data$primer_pair, primersearch_data$taxon_values)),
                              function(x) if (nrow(x) >= minimum_species_count) x))


filter <- ddply(primersearch_data, .(taxon_values, primer_pair), nrow)
filter <- filter[filter$V1 > minimum_species_count,]
filter <- (primersearch_data$taxon_values %in% filter$taxon_values) & (primersearch_data$primer_pair %in% filter$primer_pair)
primersearch_data <- primersearch_data[filter, ]

#y <- aggregate(x=primersearch_data, by=list(primersearch_data$primer_pair, primersearch_data$taxon_values), FUN=function(x) x)

@

<<eval=FALSE>>=
#extract amplicon sequences
primersearch_data$amplicon <- sequence_data$sequence[primersearch_data$id_values]
starts <- primersearch_data$forward_location
ends <- starts + primersearch_data$amplicon_length
primersearch_data$amplicon  <- substr(as.character(primersearch_data$amplicon), starts, ends)

primersearch_data <- primersearch_data[nchar(primersearch_data$amplicon) > 0,]

minimum_length <- 30

unaligned_sequences <- lapply(split(primersearch_data, list(primersearch_data$primer_pair, primersearch_data$phylum)),
                              function(x) if (nrow(x) > 0) {list_to_DNAbin(x$amplicon, paste(as.character(x$taxon_values), 
                                                                           as.character(x$id_values), 
                                                                           sep=taxonomy_separator))})
unaligned_sequences <- unaligned_sequences[sapply(unaligned_sequences, function(x) length(x) >= minimum_length)]


#align amplicon sequences
alignments <- lapply(unaligned_sequences[1], mafft, method="retree 1")

#calculate distance matrix
distances <- lapply(alignments, dist.dna, pairwise.deletion = TRUE)

@


\end{document}